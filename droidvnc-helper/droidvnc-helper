#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  target_command=""
  target_key=""
  target_value=""
  color=""
  quiet=""
}

_requirements() {
  local \
    _app
    _check_cmd \
      'app-installed' \
      'android-app-utils'
    _app="$( \
      app-installed \
        'net.christianbeier.droidvnc_ng')"
    if [[ "${_app}" != "true" ]]; then
      _msg_error \
        'DroidVNC not installed.'
    fi
    _check_cmd \
      'awk'
    _check_cmd \
      "su" \
      "tsu"
}

_server_shutdown() {
  su \
    -c \
    "killall ${_app}" || \
    _msg_info \
      "app closed"
}

_prefs_check() {
  local \
    _password \
    _msg=()
  _password="$( \
    _key_value_get \
      "password")"
  if [[ "${_password}" == *"'"* ]]; then
    _msg=(
      "illegal character ' (apostrophe),"
      "removing and enabling start at boot"
    )
    _msg_warning \
      "${_msg[*]}"
    _server_shutdown
    _key_value_default \
      password 
    _boot_enable
  elif [[ "${_password}" == "" ]]; then
    _msg=(
      "password empty, setting new one,"
      "shutting down server"
    )
    _msg_warning \
      "${_msg[*]}"
    _server_shutdown
    _key_value_default \
      password
    _boot_enable
    # activity-launch \
    #   "${_app}" \
    #   "MainActivity"
  else
    _msg_info \
      "OK"
  fi
}

_droidvnc_helper() {
  local \
    _command="${1}" \
    _args=() \
    _app \
    _prefs \
    _obj
  _app="net.christianbeier.droidvnc_ng"
  _prefs="/data/data/${_app}/shared_prefs/${_app}_preferences.xml"
  if [[ "${_command}" == "get" ]]; then
    _obj="key_value"
    _args+=(
      "$( \
        _get \
          "target" \
          "key")"
      )
  elif [[ "${_command}" == "set" ]]; then
    _obj="key_value"
    _args+=(
      "$( \
        _get \
          "target" \
          "key")"
      "$( \
        _get \
          "target" \
          "value")"
    )
  elif [[ "${_command}" == "default" ]]; then
    _obj="key_value"
    _args+=(
      "$( \
        _get \
          "target" \
          "key")"
    )
  elif [[ "${_command}" == "dump" ]]; then
    _obj="prefs"
  elif [[ "${_command}" == "check" ]]; then
    _obj="prefs"
  elif \
    [[ "${_command}" == "enable" ]] || \
    [[ "${_command}" == "disable" ]]; then
    _obj="boot"
  fi
  "_${_obj}_${_command}" \
    "${_args[@]}"
}

_prefs_dump() {
  local \
    _cmd=()
  _msg_info \
    "dumping whole configuration file '${_prefs}'"
  _cmd=(
    cat
      "${_prefs}")
  su \
    -c \
    "${_cmd[*]}"
}

_boot_switch() {
  local \
    _value="${1}" \
    _type \
    _key
  _type="attribute"
  _key="start_on_boot"
  if [[ "${_value}" == "on" ]]; then
    _value="true"
  elif [[ "${_value}" == "off" ]]; then
    _value="false"
  fi
  "_${_type}_set" \
    "settings_${_key}" \
    "${_value}"
}

_boot_enable() {
  _boot_switch \
    "on"
}

_boot_disable() {
  _boot_switch \
    "off"
}

_key_value_set() {
  local \
    _key="${1}" \
    _value="${2}" \
    _type \
    _cmd=()
  if [[ "${_key}" == "password" ]]; then
    _type="value"
    "_${_type}_set" \
       "server_last_${_key}" \
       "${_value}"
    "_${_type}_set" \
       "settings_${_key}" \
       "${_value}"
  elif [[ "${_key}" == "port" ]]; then
    _type="attribute"
    "_${_type}_set" \
       "server_last_${_key}" \
       "${_value}"
    "_${_type}_set" \
       "settings_${_key}" \
       "${_value}"
  fi
}

_value_set() {
  local \
    _key="${1}" \
    _value="${2}" \
    _cmd=() \
    _pattern \
    _expr
  _msg_info \
    "Setting value ${_value} for key ${_key}"
  _pattern="$( \
    _key_value_get \
      "${_key}")"
  _expr="s/${_key}\""'>'"${_pattern}/${_key}\""'>'"${_value}/g"
  _msg_info \
    "sedding ${_pattern} with expression ${_expr}"
  _cmd=(
    sed
      "'${_expr}'"
      -i
      "${_prefs}"
  )
  su \
    -c \
    "${_cmd[*]}"
}

_attribute_set() {
  local \
    _key="${1}" \
    _value="${2}" \
    _cmd=() \
    _pattern \
    _expr
  _msg_info \
    "Setting value ${_value} for attribute ${_key}"
  _pattern="$( \
    _key_value_get \
      "${_key}")"
  _expr="s/name=\"${_key}\" value=\"${_pattern}\"/name=\"${_key}\" value=\"${_value}\"/g"
  _msg_info \
    "sedding ${_pattern} with expression ${_expr}"
  _cmd=(
    sed
      "'${_expr}'"
      -i
      "${_prefs}"
  )
  su \
    -c \
    "${_cmd[*]}"
}


_attribute_get() {
  echo \
    "${_line}" | \
    grep \
      '"'"${_key}"'"' | \
      awk \
        '{print $3}' | \
        awk \
          -F \
            "=" \
          '{print $2}' | \
          awk \
            -F '"' \
            '{print $2}'
}

_value_get() {
  echo \
    "${_line}" | \
    grep \
      "${_key}" | \
      awk \
        -F \
          ">" \
        '{print $2}' | \
        awk \
          -F \
            "<" \
          '{print $1}'
}

# Get DroidVNC settings key
# $1: target settings key
_key_value_default() {
  local \
    _key="${1}" \
    _prefs \
    _field \
    _delete_expr \
    _add_expr \
    _password \
    _tmp
  _prefs="/data/data/${_app}/shared_prefs/${_app}_preferences.xml"
  if [[ "${_key}" == "password" ]]; then
    _tmp="$( \
      mktemp)"
    key-gen \
      "${_tmp}" 
    _password="$( \
      cat \
        "${_tmp}")"
    rm \
      "${_tmp}"
    for _field \
      in "settings_${_key}" \
         "server_last_${_key}"; do
      _delete_expr="/${_field}/d"
      _add_expr="4i <string name=\"${_field}\">${_password}</string>"
      su \
        -c \
        sed \
          "'${_delete_expr}'" \
          -i \
            "${_prefs}"
      su \
        -c \
        sed \
          "'${_add_expr}'" \
          -i \
            "${_prefs}"
    done
  fi
}

# Get DroidVNC settings key
# $1: target settings key
_key_value_get() {
  local \
    _key="${1}" \
    _value \
    _msg=() \
    _prefs \
    _line
  _prefs="/data/data/${_app}/shared_prefs/${_app}_preferences.xml"
  if [[ "${_key}" == "password" ]]; then
    _key="settings_${_key}"
  fi
  _line="$( \
    su \
      -c \
      "cat ${_prefs}")"
  _value="$( \
    _attribute_get)"
  if [[ "${_value}" == "" ]]; then
    _value="$( \
      _value_get)"
  fi
  echo \
    "${_value}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Get or set DroidVNC settings
usage:
  $(_get "app" "name")
    [options]
    <command>
    <key>
    (<value>)
  commands:
     get                  Get configuration value
     set                  Set configuration value
     default              Set default value.
     dump                 Display configuration file
     check                Check and fix issues in the configuration.
     enable               Enable server auto start at boot.
     disable              Disable server auto start at boot.
  options:
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _get_date
  TZ=UTC \
    printf \
      -v _get_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "           Operation date:   $(_get "_get" "date")"
  _msg_info "           Target command:   $(_get "target" "command")"
  _msg_info "               Target key:   $(_get "target" "key")"
  _msg_info "             Target value:   $(_get "target" "value")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'cvh?' \
    arg; do
  case \
    "${arg}" in
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "no command given" \
    0
  _set_overrides
  _usage \
    1
fi
_set \
  "target" \
  "command" \
  "${1}"
(( 1 < $# )) && \
_set \
  "target" \
  "key" \
  "${2}"
(( 2 < $# )) && \
_set \
  "target" \
  "value" \
  "${3}"
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$( \
    _get \
      "target" \
      "command")"
)
_droidvnc_helper \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
